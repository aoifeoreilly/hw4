/************************************************************************
* 
*                           README
* 
* Assignment:   HW4 Arith
* Date:         February 24th, 2025
* Authors:      Griffin Faecher (gfaech01) and Aoife O'Reilly (aoreil02)
* 
*************************************************************************/

Acknowledgements
------------

    TAs: Bill, Milo, Moses, Michael, Max


What has been correctly implemented and what has not
------------
    
    Correct: As far as we know, everything has been implemented correctly. All
    parts of our program work as intended

    Incorrect: As far as we know, there are no bugs in our program.
               

Architecture
------------
40image.c
Handles command-line arguments to either compress or decompress PPM images. It
uses compress40 and decompress40 functions to convert images to a compressed
binary format or restore them to their original state.

a2blocked.c & a2plain.c: Provide method suites for 2D arrays with blocked and
plain memory layouts respectively. a2blocked.c optimizes cache usage by storing
elements in blocks, while a2plain.c stores elements in row-major order.

bitpack.c: Implements bit-level operations for packing and unpacking data into
64-bit words. It ensures proper logical operation excecution by casting
immedaites to appropriate sizes before operations. Exceptions are raised if the
data does not fit within the specified bit width.

block_unblock.c: Converts groups of four pixels (in component video
representation) into a single representation with Y1, Y2, Y3, and Y4 values
along with Pb and Pr averages and vice versa. This step utilizes blocked 2d 
arrays to organize both input and output images. 

compress_decompress.c: Coordinates the entire compression and decompression
process, including reading PPM files, converting color spaces, performing DCT,
and managing packing and unpacking of codewords.

convert_comp_rgb.c: Contains functions to convert between RGB and YPbPr
(component video) color spaces. It ensures proper clamping of values to prevent
overflow or underflow during conversion.

DCT_transform.c: Converts pixel data to and from discrete
cosine transform (DCT) coefficients. DCT_transform.h defines the structures and
functions for this process, ensuring accurate transformation and inverse
transformation between component video space and DCT coefficients.

pack_unpack.c: Manages packing DCT coefficients and color
information into 32-bit codewords for efficient storage and unpacking them back
into meaningful data. pack_unpack.h defines the necessary interfaces for these
operations.

ppmdiff.c: Compares two PPM images by calculating the root mean
square (RMS) difference between them, providing a quantitative measure of
compression quality. ppmdiff.h defines the functions for reading files and
performing comparisons.

read_write.c: Handles reading and writing compressed binary
images to and from standard output. read_write.h contains function declarations
for reading input files, writing output files, and handling big-endian order.

trimPPM.c: Ensures the dimensions of PPM images are even by trimming
the last row or column if necessary. trimPPM.h provides the interface for this
functionality.

uarray2.c & uarray2.h: Implements a 2D unboxed array using a 1D array as the
underlying storage. uarray2.h provides function declarations for creating,
freeing, and manipulating these 2D arrays.

uarray2b.c: Builds on uarray2.c by implementing blocked 2D arrays to enhance
cache efficiency. It supports functions for accessing elements, managing memory,
and applying functions over elements in a block-major order.

Time Spent Analyzing the Problems 
-----------
We spent approximately 6 hours analyzing the problems in this assignment.

Time Spent Solving the Problems 
-----------
We spent approximately 20 hours solving the problems in this assignment.